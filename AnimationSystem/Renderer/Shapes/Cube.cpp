#include "Cube.hpp"
#include <algorithm>
#include <iterator>

namespace AnimationSystem
{
    namespace Shapes
    {
        using f3 = simd_float3;
        using simd::float2;
        Cube::Cube()
        {
            ShaderTypes::VertexData aVerts[24] = {
                {{1, 1, 1}, {-0, 1, 0}, {0.625, 0.5}},
                {{-1, 1, 1}, {-0, 1, 0}, {0.875, 0.5}},
                {{-1, 1, -1}, {-0, 1, 0}, {0.875, 0.25}},
                {{1, 1, -1}, {-0, 1, 0}, {0.625, 0.25}},
                {{1, -1, -1}, {-0, -0, -1}, {0.375, 0.25}},
                {{1, 1, -1}, {-0, -0, -1}, {0.625, 0.25}},
                {{-1, 1, -1}, {-0, -0, -1}, {0.625, 0}},
                {{-1, -1, -1}, {-0, -0, -1}, {0.375, 0}},
                {{-1, -1, -1}, {-1, -0, 0}, {0.375, 1}},
                {{-1, 1, -1}, {-1, -0, 0}, {0.625, 1}},
                {{-1, 1, 1}, {-1, -0, 0}, {0.625, 0.75}},
                {{-1, -1, 1}, {-1, -0, 0}, {0.375, 0.75}},
                {{-1, -1, 1}, {-0, -1, 0}, {0.125, 0.5}},
                {{1, -1, 1}, {-0, -1, 0}, {0.375, 0.5}},
                {{1, -1, -1}, {-0, -1, 0}, {0.375, 0.25}},
                {{-1, -1, -1}, {-0, -1, 0}, {0.125, 0.25}},
                {{1, -1, 1}, {1, -0, 0}, {0.375, 0.5}},
                {{1, 1, 1}, {1, -0, 0}, {0.625, 0.5}},
                {{1, 1, -1}, {1, -0, 0}, {0.625, 0.25}},
                {{1, -1, -1}, {1, -0, 0}, {0.375, 0.25}},
                {{-1, -1, 1}, {-0, -0, 1}, {0.375, 0.75}},
                {{-1, 1, 1}, {-0, -0, 1}, {0.625, 0.75}},
                {{1, 1, 1}, {-0, -0, 1}, {0.625, 0.5}},
                {{1, -1, 1}, {-0, -0, 1}, {0.375, 0.5}}};

            std::copy(std::begin(aVerts), std::end(aVerts), std::begin(verts));

            uint16_t aIndices[36] = {3, 1, 0, 3, 2, 1,
                                     7, 5, 4, 7, 6, 5,
                                     11, 9, 8, 11, 10, 9,
                                     15, 13, 12, 15, 14, 13,
                                     19, 17, 16, 19, 18, 17,
                                     23, 21, 20, 23, 22, 21};

            std::copy(std::begin(aIndices), std::end(aIndices), std::begin(indices));
        }
        Cube::Cube(float s)
        {
            ShaderTypes::VertexData aVerts[24] = {
                //   Positions          Normals
                {{-s, -s, +s}, {0.f, 0.f, 1.f}, (float2){0.f, 1.f}},
                {{+s, -s, +s}, {0.f, 0.f, 1.f}, {1.f, 1.f}},
                {{+s, +s, +s}, {0.f, 0.f, 1.f}, {1.f, 0.f}},
                {{-s, +s, +s}, {0.f, 0.f, 1.f}, {0.f, 0.f}},
                {{+s, -s, +s}, {1.f, 0.f, 0.f}, {0.f, 1.f}},
                {{+s, -s, -s}, {1.f, 0.f, 0.f}, {1.f, 1.f}},
                {{+s, +s, -s}, {1.f, 0.f, 0.f}, {1.f, 0.f}},
                {{+s, +s, +s}, {1.f, 0.f, 0.f}, {0.f, 0.f}},
                {{+s, -s, -s}, {0.f, 0.f, -1.f}, {0.f, 1.f}},
                {{-s, -s, -s}, {0.f, 0.f, -1.f}, {1.f, 1.f}},
                {{-s, +s, -s}, {0.f, 0.f, -1.f}, {1.f, 0.f}},
                {{+s, +s, -s}, {0.f, 0.f, -1.f}, {0.f, 0.f}},
                {{-s, -s, -s}, {-1.f, 0.f, 0.f}, {0.f, 1.f}},
                {{-s, -s, +s}, {-1.f, 0.f, 0.f}, {1.f, 1.f}},
                {{-s, +s, +s}, {-1.f, 0.f, 0.f}, {1.f, 0.f}},
                {{-s, +s, -s}, {-1.f, 0.f, 0.f}, {0.f, 0.f}},
                {{-s, +s, +s}, {0.f, 1.f, 0.f}, {0.f, 1.f}},
                {{+s, +s, +s}, {0.f, 1.f, 0.f}, {1.f, 1.f}},
                {{+s, +s, -s}, {0.f, 1.f, 0.f}, {1.f, 0.f}},
                {{-s, +s, -s}, {0.f, 1.f, 0.f}, {0.f, 0.f}},
                {{-s, -s, -s}, {0.f, -1.f, 0.f}, {0.f, 1.f}},
                {{+s, -s, -s}, {0.f, -1.f, 0.f}, {1.f, 1.f}},
                {{+s, -s, +s}, {0.f, -1.f, 0.f}, {1.f, 0.f}},
                {{-s, -s, +s}, {0.f, -1.f, 0.f}, {0.f, 0.f}},
            };
            std::copy(std::begin(aVerts), std::end(aVerts), std::begin(verts));

            uint16_t aIndices[36] = {
                0, 1, 2, 2, 3, 0,       /* front */
                4, 5, 6, 6, 7, 4,       /* right */
                8, 9, 10, 10, 11, 8,    /* back */
                12, 13, 14, 14, 15, 12, /* left */
                16, 17, 18, 18, 19, 16, /* top */
                20, 21, 22, 22, 23, 20, /* bottom */
            };

            std::copy(std::begin(aIndices), std::end(aIndices), std::begin(indices));
        }
    }
} // namespace AnimationSystem
